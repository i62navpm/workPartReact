type Business {
  address: String
  cif: String
  date: String
  email: String
  employees(after: String, first: Int): EmployeeConnection
  id: ID!
  image: String
  name: String!
  phone: String
  user: User
  userId: ID!
  web: String
}

type BusinessConnection {
  items: [Business]
  nextToken: String
}

type Employee {
  address: String
  business: Business
  businessId: ID!
  description: String
  email: String
  fullSalary: Float
  halfSalary: Float
  id: ID!
  image: String
  name: String!
  nif: String
  phone: String
}

type EmployeeConnection {
  items: [Employee]
  nextToken: String
}

type Mutation {
  createBusiness(input: CreateBusinessInput!): Business
  createEmployee(input: CreateEmployeeInput!): Employee
  createUser(input: CreateUserInput!): User
  deleteBusiness(input: DeleteBusinessInput!): Business
  deleteEmployee(input: DeleteEmployeeInput!): Employee
  deleteUser(input: DeleteUserInput!): User
  updateBusiness(input: UpdateBusinessInput!): Business
  updateEmployee(input: UpdateEmployeeInput!): Employee
  updateUser(input: UpdateUserInput!): User
}

type Query {
  getAllUsers: [User]
  getBusiness(id: ID!, userId: ID!): Business
  getEmployee(businessId: ID!, id: ID!): Employee
  getUser(id: ID!): User
  listBusinesses(after: String, first: Int): BusinessConnection
  listEmployees(after: String, first: Int): EmployeeConnection
  listUsers(after: String, first: Int): UserConnection
  queryBusinessesByUserIdIndex(after: String, first: Int, userId: ID!): BusinessConnection
  queryEmployeesByBusinessIdIndex(after: String, businessId: ID!, first: Int): EmployeeConnection
}

type Subscription {
  onCreateBusiness(cif: String, date: String, id: ID, name: String, userId: ID): Business
    @aws_subscribe(mutations: ["createBusiness"])
onCreateEmployee(address: String, businessId: ID, id: ID, name: String, nif: String): Employee
@aws_subscribe(mutations: ["createEmployee"])
onCreateUser(cognitoId: ID, email: String, id: ID): User
@aws_subscribe(mutations: ["createUser"])
onDeleteBusiness(cif: String, date: String, id: ID, name: String, userId: ID): Business
@aws_subscribe(mutations: ["deleteBusiness"])
onDeleteEmployee(address: String, businessId: ID, id: ID, name: String, nif: String): Employee
@aws_subscribe(mutations: ["deleteEmployee"])
onDeleteUser(cognitoId: ID, email: String, id: ID): User
@aws_subscribe(mutations: ["deleteUser"])
onUpdateBusiness(cif: String, date: String, id: ID, name: String, userId: ID): Business
@aws_subscribe(mutations: ["updateBusiness"])
onUpdateEmployee(address: String, businessId: ID, id: ID, name: String, nif: String): Employee
@aws_subscribe(mutations: ["updateEmployee"])
onUpdateUser(cognitoId: ID, email: String, id: ID): User
@aws_subscribe(mutations: ["updateUser"])
}

type User {
  business(after: String, first: Int): BusinessConnection
  cognitoId: ID!
  email: String!
  id: ID!
}

type UserConnection {
  items: [User]
  nextToken: String
}

type schema {
  query: Query
}

input CreateBusinessInput {
  address: String
  cif: String
  date: String
  email: String
  id: ID!
  image: String
  name: String!
  phone: String
  userId: ID!
  web: String
}

input CreateEmployeeInput {
  address: String
  businessId: ID!
  description: String
  email: String
  fullSalary: Float
  halfSalary: Float
  id: ID!
  image: String
  name: String!
  nif: String
  phone: String
}

input CreateUserInput {
  cognitoId: ID!
  email: String!
  id: ID!
}

input DeleteBusinessInput {
  id: ID!
  userId: ID!
}

input DeleteEmployeeInput {
  businessId: ID!
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input UpdateBusinessInput {
  address: String
  cif: String
  date: String
  email: String
  id: ID!
  image: String
  name: String
  phone: String
  userId: ID!
  web: String
}

input UpdateEmployeeInput {
  address: String
  businessId: ID!
  description: String
  email: String
  fullSalary: Float
  halfSalary: Float
  id: ID!
  image: String
  name: String
  nif: String
  phone: String
}

input UpdateUserInput {
  cognitoId: ID
  email: String
  id: ID!
}
